networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.1.0/24
          gateway: 172.20.1.1
    driver_opts:
      com.docker.network.bridge.name: "purrsrv"

services:
  dcsm.purr:
    image: ghcr.io/igor47/dcsm:v0.3.0
    environment:
      - DCSM_KEYFILE=/secrets/key.private
      - DCSM_SECRETS_FILE=/secrets/secrets.encrypted
      - DCSM_SOURCE_FILE=/secrets/secrets.yaml
      - DCSM_TEMPLATE_DIR=/config
      - DCSM_TEMPLATE_DIR2=/init_scripts
    volumes:
      - ./secrets:/secrets
      - ./config:/config
      - ./init_scripts:/init_scripts

  traefik.purr:
    image: traefik:v3.1
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.traefik.rule: Host(`traefik.moomers.org`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authentik@file
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: le
      traefik.http.routers.traefik.entrypoints: https
    ports:
      - "173.236.34.125:80:80"
      - "173.236.34.125:443:443"
      - "173.236.34.125:636:636"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/traefik:/etc/traefik
      - ./storage/traefik/acme:/acme
    env_file:
      - ./config/traefik/cloudflare.env

  # mmrs.link link shortening service
  mmrs.link:
    image: ghcr.io/igor47/smrs:v0.1.1
    restart: unless-stopped
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.mmrs.rule: "Host(`mmrs.link`) || Host(`www.mmrs.link`)"
      traefik.http.routers.mmrs.tls: true
      traefik.http.routers.mmrs.tls.certresolver: cf
      traefik.http.routers.mmrs.entrypoints: https
      traefik.http.services.mmrs.loadbalancer.server.port: 8000
    volumes:
      # create this directory, then `chown 82:82 mmrs/data` (that's the UID inside the container)
      - ./storage/mmrs/data:/smrs/data

  redis.purr:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./storage/redis/data:/data

  postgres.purr:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
      - ./init_scripts:/init_scripts
    env_file:
      - ./config/postgres/default_creds.env

  authentik:
    image: ghcr.io/goauthentik/server:2025.2.4
    restart: unless-stopped
    depends_on:
      authentik.worker:
        condition: service_healthy
    command: server
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.authentik.rule: "Host(`auth.moomers.org`) || PathPrefix(`/outpost.goauthentik.io/`)"
      traefik.http.routers.authentik.tls: true
      traefik.http.routers.authentik.tls.certresolver: le
      traefik.http.routers.authentik.entrypoints: https
      traefik.http.services.authentik.loadbalancer.server.port: 9000
    environment:
      AUTHENTIK_REDIS__HOST: redis.purr
      AUTHENTIK_POSTGRESQL__HOST: postgres.purr
      AUTHENTIK_EMAIL__HOST: 172.20.1.1
      AUTHENTIK_EMAIL__FROM: "Moomers Auth <authentik@moomers.org>"
    volumes:
      - ./storage/authentik/media:/media
      - ./storage/authentik/templates:/templates
    env_file:
      - ./config/authentik/creds.env

  authentik.worker:
    image: ghcr.io/goauthentik/server:2025.2.4
    restart: unless-stopped
    depends_on:
      postgres.purr:
        condition: service_healthy
      redis.purr:
        condition: service_healthy
      dcsm.purr:
        condition: service_completed_successfully
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis.purr
      AUTHENTIK_POSTGRESQL__HOST: postgres.purr
      AUTHENTIK_EMAIL__HOST: 172.20.1.1
      AUTHENTIK_EMAIL__FROM: "Moomers Auth <authentik@moomers.org>"
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - ./storage/authentik/media:/media
      - ./storage/authentik/templates:/templates
      - ./storage/authentik/certs:/certs
      #- /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./config/authentik/creds.env

  # whoami?
  whoami.purr:
    image: traefik/whoami
    restart: unless-stopped
    command:
      - --port=3456
      - --name="Who the Moomers are You?"
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.whoami.rule: Host(`whoami.moomers.org`)
      traefik.http.routers.whoami.tls: true
      traefik.http.routers.whoami.tls.certresolver: le
      traefik.http.routers.whoami.entrypoints: https
      traefik.http.services.whoami.loadbalancer.server.port: 3456
      ## Middlewares
      traefik.http.routers.whoami.middlewares: authentik@file

  # grafana
  grafana.purr:
    image: grafana/grafana-enterprise
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      victoria.purr:
        condition: service_started
    volumes:
      - ./storage/grafana/data:/var/lib/grafana
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
    env_file:
      - ./config/grafana/oauth_creds.env
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.grafana.rule: Host(`grafana.moomers.org`)
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.tls.certresolver: le
      traefik.http.routers.grafana.entrypoints: https
      # not needed, it's the default exposed port so traefik picks is automatically
      #traefik.http.services.grafana.loadbalancer.server.port: 3000

  # victoria metrics
  # see:
  # https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/deployment/docker/docker-compose.yml
  victoria.purr:
    image: victoriametrics/victoria-metrics
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    hostname: victoriametrics
    command:
      - "-storageDataPath=/storage"
      - "-retentionPeriod=1y"
      - "-selfScrapeInterval=60s"
    volumes:
      - ./storage/victoria/data:/storage
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.victoria.rule: Host(`victoria.moomers.org`)
      traefik.http.routers.victoria.tls: true
      traefik.http.routers.victoria.tls.certresolver: le
      traefik.http.routers.victoria.entrypoints: https
      traefik.http.services.victoria.loadbalancer.server.port: 8428
      # auth through authentik; we exclude `/write` (in authentik) to allow telegraf
      traefik.http.routers.victoria.middlewares: authentik@file

  # hedgedoc
  # see:
  # https://docs.hedgedoc.org/setup/docker/
  notes.purr:
    # Make sure to use the latest release from https://hedgedoc.org/latest-release
    image: quay.io/hedgedoc/hedgedoc:1.10.3
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      postgres.purr:
        condition: service_healthy
    environment:
      - CMD_CONFIG_FILE=/hedgedoc/config/config.json
    volumes:
      - ./storage/hedgedoc/uploads:/hedgedoc/public/uploads
      - ./config/hedgedoc:/hedgedoc/config
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.notes.rule: Host(`notes.moomers.org`)
      traefik.http.routers.notes.tls: true
      traefik.http.routers.notes.tls.certresolver: le
      traefik.http.routers.notes.entrypoints: https

  # password manager passbolt
  # https://github.com/passbolt/passbolt_docker/blob/master/docker-compose/docker-compose-ce-postgresql.yaml
  # https://www.passbolt.com/docs/hosting/configure/environment-reference/
  # passbolt:
  #   # https://hub.docker.com/r/passbolt/passbolt/tags
  #   image: passbolt/passbolt:4.10.1-1-ce-non-root
  #   restart: unless-stopped
  #   tty: true
  #   depends_on:
  #     dcsm.purr:
  #       condition: service_completed_successfully
  #     postgres.purr:
  #       condition: service_healthy
  #   env_file:
  #     - ./config/passbolt/env
  #   volumes:
  #     - ./storage/passbolt/gpg:/etc/passbolt/gpg
  #     - ./storage/passbolt/jwt:/etc/passbolt/jwt
  #   command: >
  #     bash -c "/usr/bin/wait-for.sh -t 0 postgres.purr:5432 -- /docker-entrypoint.sh"
  #   labels:
  #     traefik.enable: true
  #     cluster.name: purr.services
  #     traefik.http.routers.passwords.rule: Host(`passwords.moomers.org`)
  #     traefik.http.routers.passwords.tls: true
  #     traefik.http.routers.passwords.tls.certresolver: le
  #     traefik.http.routers.passwords.entrypoints: https
  #     traefik.http.services.passwords.loadbalancer.server.port: 8080
 
  # psono -- a different password manager
  # https://doc.psono.com/admin/installation/install-psono-ee.html#installation
  psono:
    # https://hub.docker.com/r/psono/psono-combo-enterprise/tags
    image: psono/psono-combo-enterprise:5.0.10-4.0.1-1.7.14
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      postgres.purr:
        condition: service_healthy
    volumes:
      - ./config/psono/settings.yaml:/root/.psono_server/settings.yaml
      - ./config/psono/config.json:/usr/share/nginx/html/config.json
      - ./config/psono/config.json:/usr/share/nginx/html/portal/config.json
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.passwords.rule: Host(`passwords.moomers.org`)
      traefik.http.routers.passwords.tls: true
      traefik.http.routers.passwords.tls.certresolver: le
      traefik.http.routers.passwords.entrypoints: https

  # time planner hosted at plantime.moomers.org
  # https://support.rallly.co/self-hosting/docker-compose
  # https://github.com/lukevella/rallly-selfhosted/blob/main/docker-compose.yml
  rally.purr:
    # https://hub.docker.com/r/lukevella/rallly/tags
    image: lukevella/rallly:3
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      postgres.purr:
        condition: service_healthy
    env_file:
      - ./config/rally/config.env
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.rally.rule: Host(`plantime.moomers.org`)
      traefik.http.routers.rally.tls: true
      traefik.http.routers.rally.tls.certresolver: le
      traefik.http.routers.rally.entrypoints: https


  # vikunja -- a task tracker
  # https://vikunja.io/docs/full-docker-example/
  #
  tasks.purr:
    # https://hub.docker.com/r/vikunja/vikunja/tags
    image: vikunja/vikunja:0.24.6
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      postgres.purr:
        condition: service_healthy
    volumes:
      - ./storage/vikunja/files:/app/vikunja/files
      - ./config/vikunja/config.yml:/etc/vikunja/config.yml
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.tasks.rule: Host(`tasks.moomers.org`)
      traefik.http.routers.tasks.tls: true
      traefik.http.routers.tasks.tls.certresolver: le
      traefik.http.routers.tasks.entrypoints: https
      traefik.http.services.tasks.loadbalancer.server.port: 3457

  # file sharing tool - PsiTransfer
  # https://github.com/psi-4ward/psitransfer
  fileshare.purr:
    image: psitrax/psitransfer:latest
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=production
      - PSITRANSFER_TRUSTPROXY=true
      - PSITRANSFER_UPLOADDIR=/data
      - PSITRANSFER_ADMINPASS=
      - PSITRANSFER_UPLOADPASS=
      - PSITRANSFER_DEFAULTRETENTION=604800
    volumes:
      - ./storage/psitransfer/data:/data
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.fileshare.rule: Host(`fileshare.moomers.org`)
      traefik.http.routers.fileshare.tls: true
      traefik.http.routers.fileshare.tls.certresolver: le
      traefik.http.routers.fileshare.entrypoints: https
      traefik.http.services.fileshare.loadbalancer.server.port: 3000
   
  mailman.core:
    image: maxking/mailman-core:0.4 # Use a specific version tag (tag latest is not published)
    restart: unless-stopped
    hostname: mailman-core
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    volumes:
      - /etc/opendkim/keys/arc.private:/etc/arc.private
      - ./config/mailman.core/custom-entrypoint.sh:/usr/local/bin/custom-entrypoint.sh
      - ./config/mailman.core/mailman.cfg:/etc/mailman.cfg
      - ./config/mailman.core/mailman-hyperkitty.cfg:/etc/mailman-hyperkitty.cfg
      - ./storage/mailman.core/var:/mailman
    entrypoint: /usr/local/bin/custom-entrypoint.sh
    stop_grace_period: 30s
    networks:
      default:
        ipv4_address: 172.20.1.131

  # mailman web
  mailman.web:
    image: maxking/mailman-web:0.4 # Use a specific version tag (tag latest is not published)
    restart: unless-stopped
    hostname: mailman-web
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    volumes:
      - ./storage/mailman.web/data:/opt/mailman-web-data
      - ./config/mailman.web/settings-local.py:/opt/mailman-web-data/settings_local.py
    environment:
      - LOG_TO_CONSOLE=yes
      - UWSGI_STATIC_MAP=/static=/opt/mailman-web-data/static
      # these are kere to satisfy the entrypoint script
      - SECRET_KEY=fakeSecretKey
      - MAILMAN_HOST_IP=172.20.1.1  # to avoid failure in `settings.py`; overridden by `settings_local.py`
      - MAILMAN_HOSTNAME=172.20.1.1
    # use a static IP because mailman needs to hit it for postorious templates
    networks:
      default:
        ipv4_address: 172.20.1.130
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.lists.rule: "Host(`mailman.moomers.org`) || Host(`lists.moomers.org`)"
      traefik.http.routers.lists.tls: true
      traefik.http.routers.lists.tls.certresolver: le
      traefik.http.routers.lists.entrypoints: https

  # synapse -- matrix home server
  tandoor.purr:
    image: vabene1111/recipes:latest
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      postgres.purr:
        condition: service_healthy
    env_file:
      - ./config/tandoor/env
    volumes:
      - ./storage/tandoor/static:/opt/recipes/staticfiles
      - ./storage/tandoor/media:/opt/recipes/mediafiles
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.tandoor.rule: Host(`recipes.moomers.org`)
      traefik.http.routers.tandoor.tls: true
      traefik.http.routers.tandoor.tls.certresolver: le
      traefik.http.routers.tandoor.entrypoints: https

  immich.db:
    image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    env_file:
      - ./config/immich/db.env
    volumes:
      - ./storage/immich/db/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  immich.server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:v1.131.3
    restart: unless-stopped
    depends_on:
      immich.db:
        condition: service_healthy
      redis.purr:
        condition: service_healthy
      dcsm.purr:
        condition: service_completed_successfully
    env_file:
      - ./config/immich/config.env
    volumes:
      - ./storage/immich/uploads:/usr/src/app/upload
      - /home/igor47/DCIM:/external/igor47/DCIM
    healthcheck:
      disable: false
    labels:
      # Frontend
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.immich.rule: Host(`photos.moomers.org`)
      traefik.http.routers.immich.tls: true
      traefik.http.routers.immich.tls.certresolver: le
      traefik.http.routers.immich.entrypoints: https

  immich.ml:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:v1.131.3
    restart: unless-stopped
    volumes:
      - ./storage/immich/ml/cache:/cache
    healthcheck:
      disable: false

  # serving static files
  nginx.purr:
    image: nginx:1-alpine
    restart: unless-stopped
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./storage/tandoor/static:/tandoor/static:ro
      - ./storage/tandoor/media:/tandoor/media:ro
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.rstatic.rule: Host(`recipes.moomers.org`) && (PathPrefix(`/media/`) || PathPrefix(`/static/`))
      traefik.http.routers.rstatic.tls: true
      traefik.http.routers.rstatic.tls.certresolver: le
      traefik.http.routers.rstatic.entrypoints: https
      traefik.http.routers.rstatic.service: rstatic
      traefik.http.services.rstatic.loadbalancer.server.port: 80
