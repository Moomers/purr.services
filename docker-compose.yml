version: '3.9'

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.1.0/24
          gateway: 172.20.1.1
    driver_opts:
      com.docker.network.bridge.name: "purrsrv"

services:
  dcsm.purr:
    image: ghcr.io/igor47/dcsm:v0.3.0
    environment:
      - DCSM_KEYFILE=/secrets/key.private
      - DCSM_SECRETS_FILE=/secrets/secrets.encrypted
      - DCSM_SOURCE_FILE=/secrets/secrets.yaml
      - DCSM_TEMPLATE_DIR=/config
      - DCSM_TEMPLATE_DIR2=/init_scripts
    volumes:
      - ./secrets:/secrets
      - ./config:/config
      - ./init_scripts:/init_scripts

  traefik.purr:
    image: traefik:v2.9
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.traefik.rule: Host(`traefik.moomers.org`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authentik@file
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: le
      traefik.http.routers.traefik.entrypoints: https
    ports:
      - "173.236.34.125:80:80"
      - "173.236.34.125:443:443"
      - "173.236.34.125:636:636"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/traefik:/etc/traefik
      - ./storage/traefik/acme:/acme
    env_file:
      - ./config/traefik/cloudflare.env

  # mmrs.link link shortening service
  mmrs.link:
    image: ghcr.io/igor47/smrs:v0.1.1
    restart: unless-stopped
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.mmrs.rule: Host(`mmrs.link`,`www.mmrs.link`)
      traefik.http.routers.mmrs.tls: true
      traefik.http.routers.mmrs.tls.certresolver: cf
      traefik.http.routers.mmrs.entrypoints: https
      traefik.http.services.mmrs.loadbalancer.server.port: 8000
    volumes:
      # create this directory, then `chown 82:82 mmrs/data` (that's the UID inside the container)
      - ./storage/mmrs/data:/smrs/data

  redis.purr:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./storage/redis/data:/data

  postgres.purr:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
      - ./init_scripts:/init_scripts
    env_file:
      - ./config/postgres/default_creds.env

  authentik:
    image: ghcr.io/goauthentik/server:2023.10
    restart: unless-stopped
    depends_on:
      authentik.worker:
        condition: service_healthy
    command: server
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.authentik.rule: "Host(`auth.moomers.org`) || PathPrefix(`/outpost.goauthentik.io/`)"
      traefik.http.routers.authentik.tls: true
      traefik.http.routers.authentik.tls.certresolver: le
      traefik.http.routers.authentik.entrypoints: https
      traefik.http.services.authentik.loadbalancer.server.port: 9000
    environment:
      AUTHENTIK_REDIS__HOST: redis.purr
      AUTHENTIK_POSTGRESQL__HOST: postgres.purr
      AUTHENTIK_EMAIL__HOST: 172.20.1.1
      AUTHENTIK_EMAIL__FROM: "Moomers Auth <authentik@moomers.org>"
    volumes:
      - ./storage/authentik/media:/media
      - ./storage/authentik/templates:/templates
    env_file:
      - ./config/authentik/creds.env

  authentik.worker:
    image: ghcr.io/goauthentik/server:2023.10
    restart: unless-stopped
    depends_on:
      postgres.purr:
        condition: service_healthy
      redis.purr:
        condition: service_healthy
      dcsm.purr:
        condition: service_completed_successfully
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis.purr
      AUTHENTIK_POSTGRESQL__HOST: postgres.purr
      AUTHENTIK_EMAIL__HOST: 172.20.1.1
      AUTHENTIK_EMAIL__FROM: "Moomers Auth <authentik@moomers.org>"
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - ./storage/authentik/media:/media
      - ./storage/authentik/templates:/templates
      - ./storage/authentik/certs:/certs
      #- /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./config/authentik/creds.env

  authentik.ldap:
    image: ghcr.io/goauthentik/ldap
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      authentik:
        condition: service_healthy
    # we don't want to bind to host ports just yet, we will use traefik proxying
    #ports:
      #  - 389:3389
      #  - 636:6636
    environment:
      AUTHENTIK_HOST: https://auth.moomers.org
      AUTHENTIK_INSECURE: "false"
    env_file:
      - ./config/authentik/ldap.env
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.tcp.routers.ldap.rule: HostSNI(`*`)
      traefik.tcp.routers.ldap.tls: true
      traefik.tcp.routers.ldap.tls.certresolver: le
      traefik.tcp.routers.ldap.tls.domains[0].main: ldap.moomers.org
      traefik.tcp.routers.ldap.entrypoints: ldap
      traefik.tcp.services.ldap.loadbalancer.server.port: 3389

  # whoami?
  whoami.purr:
    image: traefik/whoami
    restart: unless-stopped
    command:
      - --port=3456
      - --name="Who the Moomers are You?"
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.whoami.rule: Host(`whoami.moomers.org`)
      traefik.http.routers.whoami.tls: true
      traefik.http.routers.whoami.tls.certresolver: le
      traefik.http.routers.whoami.entrypoints: https
      traefik.http.services.whoami.loadbalancer.server.port: 3456
      ## Middlewares
      traefik.http.routers.whoami.middlewares: authentik@file

  # grafana
  grafana.purr:
    image: grafana/grafana-enterprise
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
      victoria.purr:
        condition: service_started
    volumes:
      - ./storage/grafana/data:/var/lib/grafana
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
    env_file:
      - ./config/grafana/oauth_creds.env
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.grafana.rule: Host(`grafana.moomers.org`)
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.tls.certresolver: le
      traefik.http.routers.grafana.entrypoints: https
      # not needed, it's the default exposed port so traefik picks is automatically
      #traefik.http.services.grafana.loadbalancer.server.port: 3000

  # victoria metrics
  # see:
  # https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/deployment/docker/docker-compose.yml
  victoria.purr:
    image: victoriametrics/victoria-metrics
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    hostname: victoriametrics
    command:
      - "-storageDataPath=/storage"
      - "-retentionPeriod=1y"
      - "-selfScrapeInterval=60s"
    volumes:
      - ./storage/victoria/data:/storage
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.victoria.rule: Host(`victoria.moomers.org`)
      traefik.http.routers.victoria.tls: true
      traefik.http.routers.victoria.tls.certresolver: le
      traefik.http.routers.victoria.entrypoints: https
      traefik.http.services.victoria.loadbalancer.server.port: 8428
      # auth through authentik; we exclude `/write` (in authentik) to allow telegraf
      traefik.http.routers.victoria.middlewares: authentik@file

  # synapse -- matrix home server
  synapse.purr:
    image: matrixdotorg/synapse:latest
    restart: unless-stopped
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    volumes:
      - ./storage/synapse/data:/data
      - ./storage/synapse/config:/config
      - ./config/synapse/homeserver.yaml:/data/homeserver.yaml
      - ./config/synapse/log.yaml:/data/log.yaml
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.synapse.rule: Host(`synapse.moomers.org`)
      traefik.http.routers.synapse.tls: true
      traefik.http.routers.synapse.tls.certresolver: le
      traefik.http.routers.synapse.entrypoints: https

  # mailman web
  mailman.web:
    image: maxking/mailman-web:0.4 # Use a specific version tag (tag latest is not published)
    restart: unless-stopped
    hostname: mailman-web
    depends_on:
      dcsm.purr:
        condition: service_completed_successfully
    volumes:
      - ./storage/mailman.web/data:/opt/mailman-web-data
      - ./config/mailman.web/settings-local.py:/opt/mailman-web-data/settings_local.py
    environment:
      - LOG_TO_CONSOLE=yes
      - UWSGI_STATIC_MAP=/static=/opt/mailman-web-data/static
      # these are kere to satisfy the entrypoint script
      - SECRET_KEY=fakeSecretKey
      - MAILMAN_HOST_IP=172.20.1.1  # to avoid failure in `settings.py`; overridden by `settings_local.py`
      - MAILMAN_HOSTNAME=172.20.1.1
    # use a static IP because mailman needs to hit it for postorious templates
    networks:
      default:
        ipv4_address: 172.20.1.130
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.lists.rule: Host(`mailman.moomers.org`, `lists.moomers.org`)
      traefik.http.routers.lists.tls: true
      traefik.http.routers.lists.tls.certresolver: le
      traefik.http.routers.lists.entrypoints: https
