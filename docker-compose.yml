version: '3.9'

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.1.0/24
          gateway: 172.20.1.1
    driver_opts:
      com.docker.network.bridge.name: "purrsrv"

services:
  traefik.purr:
    image: traefik:v2.9
    restart: unless-stopped
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.traefik.rule: Host(`traefik.moomers.org`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authentik@file
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: le
      traefik.http.routers.traefik.entrypoints: https
    ports:
      - "173.236.34.125:80:80"
      - "173.236.34.125:443:443"
      - "173.236.34.125:636:636"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ${REPO}/config/traefik:/etc/traefik
      - ${STORAGE}/traefik/acme:/acme
    env_file:
      - ${STORAGE}/traefik/cloudflare.env

  # mmrs.link link shortening service
  mmrs.link:
    image: ghcr.io/igor47/smrs:v0.1.1
    restart: unless-stopped
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.mmrs.rule: Host(`mmrs.link`,`www.mmrs.link`)
      traefik.http.routers.mmrs.tls: true
      traefik.http.routers.mmrs.tls.certresolver: cf
      traefik.http.routers.mmrs.entrypoints: https
      traefik.http.services.mmrs.loadbalancer.server.port: 8000
    volumes:
      # create this directory, then `chown 82:82 mmrs/data` (that's the UID inside the container)
      - ${STORAGE}/mmrs/data:/smrs/data

  redis.purr:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${STORAGE}/redis/data:/data

  postgres.purr:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${STORAGE}/postgres/data:/var/lib/postgresql/data
      - ${REPO}/init_scripts:/init_scripts
    env_file:
      - ${STORAGE}/postgres/env
      # we give it authentik creds so we can run init_scripts/authentik_db.sh
      - ${STORAGE}/authentik/env

  authentik:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.8.3}
    restart: unless-stopped
    command: server
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.authentik.rule: "Host(`auth.moomers.org`) || PathPrefix(`/outpost.goauthentik.io/`)"
      traefik.http.routers.authentik.tls: true
      traefik.http.routers.authentik.tls.certresolver: le
      traefik.http.routers.authentik.entrypoints: https
      traefik.http.services.authentik.loadbalancer.server.port: 9000
    environment:
      AUTHENTIK_REDIS__HOST: redis.purr
      AUTHENTIK_POSTGRESQL__HOST: postgres.purr
      AUTHENTIK_EMAIL__HOST: 172.20.1.1
      AUTHENTIK_EMAIL__FROM: "Moomers Auth <authentik@moomers.org>"
    volumes:
      - ${STORAGE}/authentik/media:/media
      - ${STORAGE}/authentik/templates:/templates
    env_file:
      - ${STORAGE}/authentik/env
    depends_on:
      - postgres.purr
      - redis.purr
      - authentik.worker

  authentik.worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.8.3}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis.purr
      AUTHENTIK_POSTGRESQL__HOST: postgres.purr
      AUTHENTIK_EMAIL__HOST: 172.20.1.1
      AUTHENTIK_EMAIL__FROM: "Moomers Auth <authentik@moomers.org>"
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - ${STORAGE}/authentik/media:/media
      - ${STORAGE}/authentik/templates:/templates
      - ${STORAGE}/authentik/certs:/certs
      #- /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ${STORAGE}/authentik/env
    depends_on:
      - postgres.purr
      - redis.purr

  authentik.ldap:
    image: ghcr.io/goauthentik/ldap
    restart: unless-stopped
    # we don't want to bind to host ports just yet, we will use traefik proxying
    #ports:
      #  - 389:3389
      #  - 636:6636
    environment:
      AUTHENTIK_HOST: https://auth.moomers.org
      AUTHENTIK_INSECURE: "false"
    env_file:
      - ${STORAGE}/authentik/ldap.env
    depends_on:
      - authentik
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.tcp.routers.ldap.rule: HostSNI(`*`)
      traefik.tcp.routers.ldap.tls: true
      traefik.tcp.routers.ldap.tls.certresolver: le
      traefik.tcp.routers.ldap.tls.domains[0].main: ldap.moomers.org
      traefik.tcp.routers.ldap.entrypoints: ldap
      traefik.tcp.services.ldap.loadbalancer.server.port: 3389

  # whoami?
  whoami.purr:
    image: traefik/whoami
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.whoami.rule: Host(`whoami.moomers.org`)
      traefik.http.routers.whoami.tls: true
      traefik.http.routers.whoami.tls.certresolver: le
      traefik.http.routers.whoami.entrypoints: https
      traefik.http.services.whoami.loadbalancer.server.port: 80
      ## Middlewares
      traefik.http.routers.whoami.middlewares: authentik@file

  # grafana
  grafana.purr:
    image: grafana/grafana-enterprise
    restart: unless-stopped
    volumes:
      - ${STORAGE}/grafana/data:/var/lib/grafana
      - ${REPO}/config/grafana/grafana.ini:/etc/grafana/grafana.ini
    env_file:
      - ${STORAGE}/grafana/env
    labels:
      traefik.enable: true
      cluster.name: purr.services
      traefik.http.routers.grafana.rule: Host(`grafana.moomers.org`)
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.tls.certresolver: le
      traefik.http.routers.grafana.entrypoints: https
      # not needed, it's the default exposed port so traefik picks is automatically
      #traefik.http.services.grafana.loadbalancer.server.port: 3000

  # Watchtower upgrades services automatically
  watchtower.purr:
    restart: unless-stopped
    image: containrrr/watchtower
    labels:
      traefik.enable: false
      cluster.name: purr.services
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: 7200 # checks for updates every two hours
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
